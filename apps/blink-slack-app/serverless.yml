service: blink-slack-app
frameworkVersion: '4'

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  # TODO: find a way so that we don't need to pass these variables
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:SLACK_CLIENT_SECRET}
    SLACK_OAUTHTOKENS_TABLENAME: ${self:resources.Outputs.SlackOAuthTokensTableName.Value}
    USER_MESSAGE_EXPIRATION_SETTINGS_TABLENAME: ${self:resources.Outputs.UserMessageExpirationSettingsTableName.Value}
    USER_MESSAGES_TABLENAME: ${self:resources.Outputs.UserMessagesTableName.Value}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'states:StartExecution'
          # TODO: we should ref to MessageExpirationHandlerStateMachine but it's giving a circular dependency error.
          # Inspired by https://github.com/paulswail/serverless-email-scheduler/blob/master/serverless.yml
          # https://serverlessfirst.com/serverless-email-scheduler/
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt SlackOAuthTokensTable.Arn
            - !GetAtt UserMessageExpirationSettingsTable.Arn
            - !GetAtt UserMessagesTable.Arn

functions:
  slack-install-handler:
    handler: src/lambdas/slack-install-handler.handler
    events:
      - http:
          path: slack/install
          method: get
      - http:
          path: slack/oauth_redirect
          method: get

  slack-events-handler:
    handler: src/lambdas/slack-events-handler.handler
    events:
      - http:
          path: slack/events
          method: post
      # TODO: This is a quick fix to keep the function warm. Currently cold start
      # takes more than 3 secs and Slack expects a response within 3 secs. We can
      # fix the cold start by compressing the build artifact.
      - schedule:
          rate: rate(5 minutes)
          input:
            source: 'aws.events'
    environment:
      MessageExpirationHandlerStateMachineArn: ${self:resources.Outputs.MessageExpirationHandlerStateMachine.Value}
      # USER_MESSAGE_EXPIRATION_SETTINGS_TABLENAME: ${self:resources.Outputs.UserMessageExpirationSettingsTableName.Value}

  message-expiration-handler:
    handler: src/lambdas/message-expiration-handler.handler

stepFunctions:
  stateMachines:
    MessageExpirationHandlerStateMachine: ${file(src/state-machines/message-expiration-handler.state-machine.yml)}

resources:
  Resources:
    # TODO: What happens if something changes here? is database wiped? We need to protect data from deletion
    SlackOAuthTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SlackOAuthTokensTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserMessageExpirationSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserMessageExpirationSettingsTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserMessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserMessagesTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expire_at
          Enabled: true

  Outputs:
    MessageExpirationHandlerStateMachine:
      Description: The ARN of the StateMachine which hides expired slack messages
      Value:
        Ref: MessageExpirationHandlerStateMachine
    SlackOAuthTokensTableName:
      Value:
        Ref: SlackOAuthTokensTable
    UserMessageExpirationSettingsTableName:
      Value:
        Ref: UserMessageExpirationSettingsTable
    UserMessagesTableName:
      Value:
        Ref: UserMessagesTable

plugins:
  - serverless-export-env
  - serverless-step-functions
  - serverless-offline
