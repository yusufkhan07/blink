service: blink-slack-app
frameworkVersion: "4"
provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  # TODO: find a way so that we don't need to pass these variables
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
functions:
  main:
    handler: src/main.handler
    events:
      - http:
          path: slack/events
          method: post
    environment:
      MessageExpirationHandlerStateMachineArn: ${self:resources.Outputs.MessageExpirationHandlerStateMachine.Value}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "states:StartExecution"
        Resource:
          - Ref: MessageExpirationHandlerStateMachine
  message-expiration-handler:
    handler: src/message-expiration-handler.handler

stepFunctions:
  stateMachines:
    MessageExpirationHandlerStateMachine:
      id: MessageExpirationHandlerStateMachine
      name: MessageExpirationHandlerStateMachine-${opt:stage}
      definition:
        Comment: "Schedules a job at a future date"
        StartAt: WaitForDueDateTime
        States:
          WaitForDueDateTime:
            Type: Wait
            TimestampPath: "$.expireAt"
            Next: HideMessage
          HideMessage:
            Type: Task
            Resource:
              Fn::GetAtt: [message-expiration-handler, Arn]
            End: true

resources:
  Outputs:
    MessageExpirationHandlerStateMachine:
      Description: The ARN of the StateMachine which hides expired slack messages
      Value:
        Ref: MessageExpirationHandlerStateMachine

plugins:
  - serverless-export-env
  - serverless-step-functions
  - serverless-offline