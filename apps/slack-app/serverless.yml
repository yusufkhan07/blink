service: blink-slack-app
frameworkVersion: "4"
provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  # TODO: find a way so that we don't need to pass these variables
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    # TODO: Remove the BOT Token from here and ci once oauth flow is done.
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:SLACK_CLIENT_SECRET}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "states:StartExecution"
          # TODO: we should ref to MessageExpirationHandlerStateMachine but it's giving a circular dependency error.
          # Inspired by https://github.com/paulswail/serverless-email-scheduler/blob/master/serverless.yml
          # https://serverlessfirst.com/serverless-email-scheduler/
          Resource: "*"
functions:
  slack-install-handler:
    handler: src/lambdas/slack-install-handler.handler
    events:
      - http:
          path: slack/install
          method: get
      - http:
          path: slack/oauth_redirect
          method: get
  slack-events-handler:
    handler: src/lambdas/slack-events-handler.handler
    events:
      - http:
          path: slack/events
          method: post
    environment:
      MessageExpirationHandlerStateMachineArn: ${self:resources.Outputs.MessageExpirationHandlerStateMachine.Value}
  message-expiration-handler:
    handler: src/lambdas/message-expiration-handler.handler

stepFunctions:
  stateMachines:
    MessageExpirationHandlerStateMachine:
      ${file(src/state-machines/message-expiration-handler.state-machine.yml)}

resources:
  Outputs:
    MessageExpirationHandlerStateMachine:
      Description: The ARN of the StateMachine which hides expired slack messages
      Value:
        Ref: MessageExpirationHandlerStateMachine

plugins:
  - serverless-export-env
  - serverless-step-functions
  - serverless-offline